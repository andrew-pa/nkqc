
fn print: {c *u8} #(#print {()})

fn putChar: {c i32} #(#putchar {()})

"struct Range | {start u32"

"struct Counter | {x u32} |

fn (Counter) new [
	^ {Counter} x: ({u32} ~ 0)
]

fn {Counter} incr [
	x := (x + ({u32} ~ 1)).
	^ x
]

fn {Counter} decr [
	x := (x - ({u32} ~ 1)).
	^ x
]

fn {Counter} count [
	^ x
]

fn putAs: {n i32} -> i32 [
	^ (n != 0) ifTrue: [
		#G putChar: (65).
		#G putAs: (n - 1). 0
	] ifFalse: [ 1 ]
]

fn repeat: {aBlock (i32) -> ()} times: {n i32} -> () [
	(n != 0) ifTrue: [
#G repeat: aBlock times: (n-1).
		aBlock value: n
	] ifFalse: [
		aBlock value: 0
	]
]
"

"fn doTwice: {aBlock (i32) -> ()} [
	aBlock value: (7).
	aBlock value: (52)
]"

fn start [
	"#G print: ({*u8} ~ 'Hello, World!').
	#G putAs: (0).
	#G putChar: (10).
	#G putAs: (1).
	#G putChar: (10).
	#G putAs: (5).
	#G putChar: (10)."
	"#G repeat: [ :x | #G putChar: (x + 65) ] times: (10)."
	x := (0).
	[ x < 26 ] whileTrue: [ #G putChar: (x + 65). x := x + 1 ].
	#G putChar: (10).
	^ 0
]
