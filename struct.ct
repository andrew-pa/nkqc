
"some useful Win32 APIs"
fn exitProcessWithCode: {code u32} #(#'ExitProcess@4' {()})
fn emitBeepOfFrequency: {freq i32} forTime: {duration i32} #(#'Beep@8' {bool})
fn stdHandle: {index i32} #(#'GetStdHandle@4' {*u32})
fn write: {file *u32} data: {buffer *u8} ofLength: {len u32} returningBytesWritten: {numBytes *u32} andOverlapped: {ovr *u32}
	#(#'WriteFile@20' {bool})

struct Counter | {x u32} |

struct Rectangle | {x i32} {y i32} {w i32} {h i32} |

fn (Counter) new [
	^ {Counter} x: ({u32} ~ 0)
]

fn {Counter} incr [
	x := (x + ({u32} ~ 1)).
	^ x
]

fn {Counter} decr [
	x := (x - ({u32} ~ 1)).
	^ x
]


fn {Counter} count [
	^ x
]

fn testCounter [
	cnt := {Counter} new.
	cnt incr.
	cnt incr.
	cnt incr.
	cnt decr.
	^ cnt count
]

fn main [
	stdout := (#G stdHandle: -11).
	null := ({*u32} ~ 0).
	r := ({Rectangle} x: 3 y: 4 w: 50 h: 50).
	c := {Counter} new.
	c incr.
	#G write: stdout data: ({*u8} ~ 'Hello, World!') ofLength: ({u32} ~ 14) returningBytesWritten: null andOverlapped: null.
	(c count == ({u32} ~ 1)) ifTrue: [
		#G emitBeepOfFrequency: 440 forTime: (200).
		#G write: stdout data: ({*u8} ~ 'Counter has a count of 1') ofLength: ({u32} ~ 25) returningBytesWritten: null andOverlapped: null
	] ifFalse: [
		"#G write: stdout data: ({*u8} ~ 'B') ofLength: ({u32} ~ 1) returningBytesWritten: null andOverlapped: null."
		#G emitBeepOfFrequency: 3440 forTime: 200
	].
	#G exitProcessWithCode: ({u32} ~ 0).
	^ 0
]

"fn main [
	c := {Counter} new.
	c incr.
	^ (c count == ({u32} ~ 1)) ifTrue: (222) ifFalse: (333)
]"
